// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tss_rsa.proto

#include "tss_rsa.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace safeheron {
namespace proto {
PROTOBUF_CONSTEXPR RSAPublicKey::RSAPublicKey(
    ::_pbi::ConstantInitialized)
  : n_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , e_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct RSAPublicKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RSAPublicKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RSAPublicKeyDefaultTypeInternal() {}
  union {
    RSAPublicKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RSAPublicKeyDefaultTypeInternal _RSAPublicKey_default_instance_;
PROTOBUF_CONSTEXPR RSAPrivateKeyShare::RSAPrivateKeyShare(
    ::_pbi::ConstantInitialized)
  : si_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , i_(0){}
struct RSAPrivateKeyShareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RSAPrivateKeyShareDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RSAPrivateKeyShareDefaultTypeInternal() {}
  union {
    RSAPrivateKeyShare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RSAPrivateKeyShareDefaultTypeInternal _RSAPrivateKeyShare_default_instance_;
PROTOBUF_CONSTEXPR RSAKeyMeta::RSAKeyMeta(
    ::_pbi::ConstantInitialized)
  : vki_arr_()
  , vkv_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , vku_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , k_(0)
  , l_(0){}
struct RSAKeyMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RSAKeyMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RSAKeyMetaDefaultTypeInternal() {}
  union {
    RSAKeyMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RSAKeyMetaDefaultTypeInternal _RSAKeyMeta_default_instance_;
PROTOBUF_CONSTEXPR RSASigShare::RSASigShare(
    ::_pbi::ConstantInitialized)
  : sig_share_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , z_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , c_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , index_(0){}
struct RSASigShareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RSASigShareDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RSASigShareDefaultTypeInternal() {}
  union {
    RSASigShare _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RSASigShareDefaultTypeInternal _RSASigShare_default_instance_;
PROTOBUF_CONSTEXPR RSASigShareProof::RSASigShareProof(
    ::_pbi::ConstantInitialized)
  : z_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , c_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct RSASigShareProofDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RSASigShareProofDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RSASigShareProofDefaultTypeInternal() {}
  union {
    RSASigShareProof _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RSASigShareProofDefaultTypeInternal _RSASigShareProof_default_instance_;
}  // namespace proto
}  // namespace safeheron
static ::_pb::Metadata file_level_metadata_tss_5frsa_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tss_5frsa_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tss_5frsa_2eproto = nullptr;

const uint32_t TableStruct_tss_5frsa_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSAPublicKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSAPublicKey, n_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSAPublicKey, e_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSAPrivateKeyShare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSAPrivateKeyShare, i_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSAPrivateKeyShare, si_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSAKeyMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSAKeyMeta, k_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSAKeyMeta, l_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSAKeyMeta, vkv_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSAKeyMeta, vku_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSAKeyMeta, vki_arr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSASigShare, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSASigShare, index_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSASigShare, sig_share_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSASigShare, z_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSASigShare, c_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSASigShareProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSASigShareProof, z_),
  PROTOBUF_FIELD_OFFSET(::safeheron::proto::RSASigShareProof, c_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::safeheron::proto::RSAPublicKey)},
  { 8, -1, -1, sizeof(::safeheron::proto::RSAPrivateKeyShare)},
  { 16, -1, -1, sizeof(::safeheron::proto::RSAKeyMeta)},
  { 27, -1, -1, sizeof(::safeheron::proto::RSASigShare)},
  { 37, -1, -1, sizeof(::safeheron::proto::RSASigShareProof)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::safeheron::proto::_RSAPublicKey_default_instance_._instance,
  &::safeheron::proto::_RSAPrivateKeyShare_default_instance_._instance,
  &::safeheron::proto::_RSAKeyMeta_default_instance_._instance,
  &::safeheron::proto::_RSASigShare_default_instance_._instance,
  &::safeheron::proto::_RSASigShareProof_default_instance_._instance,
};

const char descriptor_table_protodef_tss_5frsa_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rtss_rsa.proto\022\017safeheron.proto\"$\n\014RSAP"
  "ublicKey\022\t\n\001n\030\001 \001(\t\022\t\n\001e\030\002 \001(\t\"+\n\022RSAPri"
  "vateKeyShare\022\t\n\001i\030\001 \001(\005\022\n\n\002si\030\002 \001(\t\"M\n\nR"
  "SAKeyMeta\022\t\n\001k\030\001 \001(\005\022\t\n\001l\030\002 \001(\005\022\013\n\003vkv\030\003"
  " \001(\t\022\013\n\003vku\030\004 \001(\t\022\017\n\007vki_arr\030\005 \003(\t\"E\n\013RS"
  "ASigShare\022\r\n\005index\030\001 \001(\005\022\021\n\tsig_share\030\002 "
  "\001(\t\022\t\n\001z\030\003 \001(\t\022\t\n\001c\030\004 \001(\t\"(\n\020RSASigShare"
  "Proof\022\t\n\001z\030\001 \001(\t\022\t\n\001c\030\002 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tss_5frsa_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tss_5frsa_2eproto = {
    false, false, 315, descriptor_table_protodef_tss_5frsa_2eproto,
    "tss_rsa.proto",
    &descriptor_table_tss_5frsa_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_tss_5frsa_2eproto::offsets,
    file_level_metadata_tss_5frsa_2eproto, file_level_enum_descriptors_tss_5frsa_2eproto,
    file_level_service_descriptors_tss_5frsa_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tss_5frsa_2eproto_getter() {
  return &descriptor_table_tss_5frsa_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tss_5frsa_2eproto(&descriptor_table_tss_5frsa_2eproto);
namespace safeheron {
namespace proto {

// ===================================================================

class RSAPublicKey::_Internal {
 public:
};

RSAPublicKey::RSAPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.RSAPublicKey)
}
RSAPublicKey::RSAPublicKey(const RSAPublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  n_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    n_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_n().empty()) {
    n_.Set(from._internal_n(), 
      GetArenaForAllocation());
  }
  e_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e().empty()) {
    e_.Set(from._internal_e(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.RSAPublicKey)
}

inline void RSAPublicKey::SharedCtor() {
n_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  n_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
e_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RSAPublicKey::~RSAPublicKey() {
  // @@protoc_insertion_point(destructor:safeheron.proto.RSAPublicKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RSAPublicKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  n_.Destroy();
  e_.Destroy();
}

void RSAPublicKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RSAPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.RSAPublicKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n_.ClearToEmpty();
  e_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RSAPublicKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_n();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.RSAPublicKey.n"));
        } else
          goto handle_unusual;
        continue;
      // string e = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_e();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.RSAPublicKey.e"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RSAPublicKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.RSAPublicKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string n = 1;
  if (!this->_internal_n().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_n().data(), static_cast<int>(this->_internal_n().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.RSAPublicKey.n");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_n(), target);
  }

  // string e = 2;
  if (!this->_internal_e().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_e().data(), static_cast<int>(this->_internal_e().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.RSAPublicKey.e");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_e(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.RSAPublicKey)
  return target;
}

size_t RSAPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.RSAPublicKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string n = 1;
  if (!this->_internal_n().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_n());
  }

  // string e = 2;
  if (!this->_internal_e().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_e());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RSAPublicKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RSAPublicKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RSAPublicKey::GetClassData() const { return &_class_data_; }

void RSAPublicKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RSAPublicKey *>(to)->MergeFrom(
      static_cast<const RSAPublicKey &>(from));
}


void RSAPublicKey::MergeFrom(const RSAPublicKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.RSAPublicKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_n().empty()) {
    _internal_set_n(from._internal_n());
  }
  if (!from._internal_e().empty()) {
    _internal_set_e(from._internal_e());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RSAPublicKey::CopyFrom(const RSAPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.RSAPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSAPublicKey::IsInitialized() const {
  return true;
}

void RSAPublicKey::InternalSwap(RSAPublicKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &n_, lhs_arena,
      &other->n_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &e_, lhs_arena,
      &other->e_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RSAPublicKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tss_5frsa_2eproto_getter, &descriptor_table_tss_5frsa_2eproto_once,
      file_level_metadata_tss_5frsa_2eproto[0]);
}

// ===================================================================

class RSAPrivateKeyShare::_Internal {
 public:
};

RSAPrivateKeyShare::RSAPrivateKeyShare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.RSAPrivateKeyShare)
}
RSAPrivateKeyShare::RSAPrivateKeyShare(const RSAPrivateKeyShare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  si_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    si_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_si().empty()) {
    si_.Set(from._internal_si(), 
      GetArenaForAllocation());
  }
  i_ = from.i_;
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.RSAPrivateKeyShare)
}

inline void RSAPrivateKeyShare::SharedCtor() {
si_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  si_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
i_ = 0;
}

RSAPrivateKeyShare::~RSAPrivateKeyShare() {
  // @@protoc_insertion_point(destructor:safeheron.proto.RSAPrivateKeyShare)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RSAPrivateKeyShare::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  si_.Destroy();
}

void RSAPrivateKeyShare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RSAPrivateKeyShare::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.RSAPrivateKeyShare)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  si_.ClearToEmpty();
  i_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RSAPrivateKeyShare::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 i = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string si = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_si();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.RSAPrivateKeyShare.si"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RSAPrivateKeyShare::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.RSAPrivateKeyShare)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 i = 1;
  if (this->_internal_i() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_i(), target);
  }

  // string si = 2;
  if (!this->_internal_si().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_si().data(), static_cast<int>(this->_internal_si().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.RSAPrivateKeyShare.si");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_si(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.RSAPrivateKeyShare)
  return target;
}

size_t RSAPrivateKeyShare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.RSAPrivateKeyShare)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string si = 2;
  if (!this->_internal_si().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_si());
  }

  // int32 i = 1;
  if (this->_internal_i() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_i());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RSAPrivateKeyShare::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RSAPrivateKeyShare::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RSAPrivateKeyShare::GetClassData() const { return &_class_data_; }

void RSAPrivateKeyShare::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RSAPrivateKeyShare *>(to)->MergeFrom(
      static_cast<const RSAPrivateKeyShare &>(from));
}


void RSAPrivateKeyShare::MergeFrom(const RSAPrivateKeyShare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.RSAPrivateKeyShare)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_si().empty()) {
    _internal_set_si(from._internal_si());
  }
  if (from._internal_i() != 0) {
    _internal_set_i(from._internal_i());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RSAPrivateKeyShare::CopyFrom(const RSAPrivateKeyShare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.RSAPrivateKeyShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSAPrivateKeyShare::IsInitialized() const {
  return true;
}

void RSAPrivateKeyShare::InternalSwap(RSAPrivateKeyShare* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &si_, lhs_arena,
      &other->si_, rhs_arena
  );
  swap(i_, other->i_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RSAPrivateKeyShare::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tss_5frsa_2eproto_getter, &descriptor_table_tss_5frsa_2eproto_once,
      file_level_metadata_tss_5frsa_2eproto[1]);
}

// ===================================================================

class RSAKeyMeta::_Internal {
 public:
};

RSAKeyMeta::RSAKeyMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vki_arr_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.RSAKeyMeta)
}
RSAKeyMeta::RSAKeyMeta(const RSAKeyMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vki_arr_(from.vki_arr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vkv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vkv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vkv().empty()) {
    vkv_.Set(from._internal_vkv(), 
      GetArenaForAllocation());
  }
  vku_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vku_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vku().empty()) {
    vku_.Set(from._internal_vku(), 
      GetArenaForAllocation());
  }
  ::memcpy(&k_, &from.k_,
    static_cast<size_t>(reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&k_)) + sizeof(l_));
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.RSAKeyMeta)
}

inline void RSAKeyMeta::SharedCtor() {
vkv_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vkv_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
vku_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vku_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&k_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&l_) -
    reinterpret_cast<char*>(&k_)) + sizeof(l_));
}

RSAKeyMeta::~RSAKeyMeta() {
  // @@protoc_insertion_point(destructor:safeheron.proto.RSAKeyMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RSAKeyMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vkv_.Destroy();
  vku_.Destroy();
}

void RSAKeyMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RSAKeyMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.RSAKeyMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vki_arr_.Clear();
  vkv_.ClearToEmpty();
  vku_.ClearToEmpty();
  ::memset(&k_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l_) -
      reinterpret_cast<char*>(&k_)) + sizeof(l_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RSAKeyMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 k = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 l = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string vkv = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_vkv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.RSAKeyMeta.vkv"));
        } else
          goto handle_unusual;
        continue;
      // string vku = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_vku();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.RSAKeyMeta.vku"));
        } else
          goto handle_unusual;
        continue;
      // repeated string vki_arr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_vki_arr();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.RSAKeyMeta.vki_arr"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RSAKeyMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.RSAKeyMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 k = 1;
  if (this->_internal_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_k(), target);
  }

  // int32 l = 2;
  if (this->_internal_l() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_l(), target);
  }

  // string vkv = 3;
  if (!this->_internal_vkv().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vkv().data(), static_cast<int>(this->_internal_vkv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.RSAKeyMeta.vkv");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_vkv(), target);
  }

  // string vku = 4;
  if (!this->_internal_vku().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vku().data(), static_cast<int>(this->_internal_vku().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.RSAKeyMeta.vku");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_vku(), target);
  }

  // repeated string vki_arr = 5;
  for (int i = 0, n = this->_internal_vki_arr_size(); i < n; i++) {
    const auto& s = this->_internal_vki_arr(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.RSAKeyMeta.vki_arr");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.RSAKeyMeta)
  return target;
}

size_t RSAKeyMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.RSAKeyMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string vki_arr = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(vki_arr_.size());
  for (int i = 0, n = vki_arr_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      vki_arr_.Get(i));
  }

  // string vkv = 3;
  if (!this->_internal_vkv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vkv());
  }

  // string vku = 4;
  if (!this->_internal_vku().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vku());
  }

  // int32 k = 1;
  if (this->_internal_k() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_k());
  }

  // int32 l = 2;
  if (this->_internal_l() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_l());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RSAKeyMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RSAKeyMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RSAKeyMeta::GetClassData() const { return &_class_data_; }

void RSAKeyMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RSAKeyMeta *>(to)->MergeFrom(
      static_cast<const RSAKeyMeta &>(from));
}


void RSAKeyMeta::MergeFrom(const RSAKeyMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.RSAKeyMeta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vki_arr_.MergeFrom(from.vki_arr_);
  if (!from._internal_vkv().empty()) {
    _internal_set_vkv(from._internal_vkv());
  }
  if (!from._internal_vku().empty()) {
    _internal_set_vku(from._internal_vku());
  }
  if (from._internal_k() != 0) {
    _internal_set_k(from._internal_k());
  }
  if (from._internal_l() != 0) {
    _internal_set_l(from._internal_l());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RSAKeyMeta::CopyFrom(const RSAKeyMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.RSAKeyMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSAKeyMeta::IsInitialized() const {
  return true;
}

void RSAKeyMeta::InternalSwap(RSAKeyMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vki_arr_.InternalSwap(&other->vki_arr_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &vkv_, lhs_arena,
      &other->vkv_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &vku_, lhs_arena,
      &other->vku_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RSAKeyMeta, l_)
      + sizeof(RSAKeyMeta::l_)
      - PROTOBUF_FIELD_OFFSET(RSAKeyMeta, k_)>(
          reinterpret_cast<char*>(&k_),
          reinterpret_cast<char*>(&other->k_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RSAKeyMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tss_5frsa_2eproto_getter, &descriptor_table_tss_5frsa_2eproto_once,
      file_level_metadata_tss_5frsa_2eproto[2]);
}

// ===================================================================

class RSASigShare::_Internal {
 public:
};

RSASigShare::RSASigShare(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.RSASigShare)
}
RSASigShare::RSASigShare(const RSASigShare& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sig_share_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sig_share_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sig_share().empty()) {
    sig_share_.Set(from._internal_sig_share(), 
      GetArenaForAllocation());
  }
  z_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    z_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_z().empty()) {
    z_.Set(from._internal_z(), 
      GetArenaForAllocation());
  }
  c_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    c_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_c().empty()) {
    c_.Set(from._internal_c(), 
      GetArenaForAllocation());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.RSASigShare)
}

inline void RSASigShare::SharedCtor() {
sig_share_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sig_share_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
z_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  z_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
c_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  c_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_ = 0;
}

RSASigShare::~RSASigShare() {
  // @@protoc_insertion_point(destructor:safeheron.proto.RSASigShare)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RSASigShare::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sig_share_.Destroy();
  z_.Destroy();
  c_.Destroy();
}

void RSASigShare::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RSASigShare::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.RSASigShare)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sig_share_.ClearToEmpty();
  z_.ClearToEmpty();
  c_.ClearToEmpty();
  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RSASigShare::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sig_share = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sig_share();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.RSASigShare.sig_share"));
        } else
          goto handle_unusual;
        continue;
      // string z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_z();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.RSASigShare.z"));
        } else
          goto handle_unusual;
        continue;
      // string c = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_c();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.RSASigShare.c"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RSASigShare::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.RSASigShare)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // string sig_share = 2;
  if (!this->_internal_sig_share().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sig_share().data(), static_cast<int>(this->_internal_sig_share().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.RSASigShare.sig_share");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sig_share(), target);
  }

  // string z = 3;
  if (!this->_internal_z().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_z().data(), static_cast<int>(this->_internal_z().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.RSASigShare.z");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_z(), target);
  }

  // string c = 4;
  if (!this->_internal_c().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_c().data(), static_cast<int>(this->_internal_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.RSASigShare.c");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.RSASigShare)
  return target;
}

size_t RSASigShare::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.RSASigShare)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sig_share = 2;
  if (!this->_internal_sig_share().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sig_share());
  }

  // string z = 3;
  if (!this->_internal_z().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_z());
  }

  // string c = 4;
  if (!this->_internal_c().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_c());
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RSASigShare::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RSASigShare::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RSASigShare::GetClassData() const { return &_class_data_; }

void RSASigShare::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RSASigShare *>(to)->MergeFrom(
      static_cast<const RSASigShare &>(from));
}


void RSASigShare::MergeFrom(const RSASigShare& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.RSASigShare)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sig_share().empty()) {
    _internal_set_sig_share(from._internal_sig_share());
  }
  if (!from._internal_z().empty()) {
    _internal_set_z(from._internal_z());
  }
  if (!from._internal_c().empty()) {
    _internal_set_c(from._internal_c());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RSASigShare::CopyFrom(const RSASigShare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.RSASigShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSASigShare::IsInitialized() const {
  return true;
}

void RSASigShare::InternalSwap(RSASigShare* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sig_share_, lhs_arena,
      &other->sig_share_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &z_, lhs_arena,
      &other->z_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &c_, lhs_arena,
      &other->c_, rhs_arena
  );
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RSASigShare::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tss_5frsa_2eproto_getter, &descriptor_table_tss_5frsa_2eproto_once,
      file_level_metadata_tss_5frsa_2eproto[3]);
}

// ===================================================================

class RSASigShareProof::_Internal {
 public:
};

RSASigShareProof::RSASigShareProof(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:safeheron.proto.RSASigShareProof)
}
RSASigShareProof::RSASigShareProof(const RSASigShareProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  z_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    z_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_z().empty()) {
    z_.Set(from._internal_z(), 
      GetArenaForAllocation());
  }
  c_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    c_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_c().empty()) {
    c_.Set(from._internal_c(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:safeheron.proto.RSASigShareProof)
}

inline void RSASigShareProof::SharedCtor() {
z_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  z_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
c_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  c_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RSASigShareProof::~RSASigShareProof() {
  // @@protoc_insertion_point(destructor:safeheron.proto.RSASigShareProof)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RSASigShareProof::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  z_.Destroy();
  c_.Destroy();
}

void RSASigShareProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RSASigShareProof::Clear() {
// @@protoc_insertion_point(message_clear_start:safeheron.proto.RSASigShareProof)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  z_.ClearToEmpty();
  c_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RSASigShareProof::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string z = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_z();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.RSASigShareProof.z"));
        } else
          goto handle_unusual;
        continue;
      // string c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_c();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "safeheron.proto.RSASigShareProof.c"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RSASigShareProof::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:safeheron.proto.RSASigShareProof)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string z = 1;
  if (!this->_internal_z().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_z().data(), static_cast<int>(this->_internal_z().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.RSASigShareProof.z");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_z(), target);
  }

  // string c = 2;
  if (!this->_internal_c().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_c().data(), static_cast<int>(this->_internal_c().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "safeheron.proto.RSASigShareProof.c");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_c(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:safeheron.proto.RSASigShareProof)
  return target;
}

size_t RSASigShareProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:safeheron.proto.RSASigShareProof)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string z = 1;
  if (!this->_internal_z().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_z());
  }

  // string c = 2;
  if (!this->_internal_c().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_c());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RSASigShareProof::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RSASigShareProof::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RSASigShareProof::GetClassData() const { return &_class_data_; }

void RSASigShareProof::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RSASigShareProof *>(to)->MergeFrom(
      static_cast<const RSASigShareProof &>(from));
}


void RSASigShareProof::MergeFrom(const RSASigShareProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:safeheron.proto.RSASigShareProof)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_z().empty()) {
    _internal_set_z(from._internal_z());
  }
  if (!from._internal_c().empty()) {
    _internal_set_c(from._internal_c());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RSASigShareProof::CopyFrom(const RSASigShareProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:safeheron.proto.RSASigShareProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSASigShareProof::IsInitialized() const {
  return true;
}

void RSASigShareProof::InternalSwap(RSASigShareProof* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &z_, lhs_arena,
      &other->z_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &c_, lhs_arena,
      &other->c_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RSASigShareProof::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tss_5frsa_2eproto_getter, &descriptor_table_tss_5frsa_2eproto_once,
      file_level_metadata_tss_5frsa_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace safeheron
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::safeheron::proto::RSAPublicKey*
Arena::CreateMaybeMessage< ::safeheron::proto::RSAPublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::RSAPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::RSAPrivateKeyShare*
Arena::CreateMaybeMessage< ::safeheron::proto::RSAPrivateKeyShare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::RSAPrivateKeyShare >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::RSAKeyMeta*
Arena::CreateMaybeMessage< ::safeheron::proto::RSAKeyMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::RSAKeyMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::RSASigShare*
Arena::CreateMaybeMessage< ::safeheron::proto::RSASigShare >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::RSASigShare >(arena);
}
template<> PROTOBUF_NOINLINE ::safeheron::proto::RSASigShareProof*
Arena::CreateMaybeMessage< ::safeheron::proto::RSASigShareProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::safeheron::proto::RSASigShareProof >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
